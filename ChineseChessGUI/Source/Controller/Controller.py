import sysfrom Controller.BoardController import BoardControllerfrom Controller.EBoardController import EBoardControllerfrom Log.Logger import Loggerfrom Model.BoardModel import BoardModelfrom Model.GameInfo import *from Network.Network import Clientfrom Utils.FenUtils import FenUtilsfrom Utils.MoveUtils import MoveUtilsfrom Utils.StateUtil import *from View.BoardView import BoardViewfrom View.EBoardView import EBoardViewfrom Const.GuiConst import PLY_DEPTHclass Controller:    def __init__(self):        BoardView()        EBoardView()        GameInfo()        StateUtil.get_instance()        self.logger = Logger(Controller.__name__)        self.client = Client()    def handle_event(self):        # ai mode or ai turn        if not GameInfo.get_instance().isUpperTurn and GameInfo.get_instance().mode == MODE[0] \                and not BoardModel.get_instance().is_check:            # send fen to engine            self.logger.info("send fen to engine: " + FenUtils.matrix2fen(BoardModel.get_instance().state) + ' b')            ply = BoardModel.get_instance().plydepth            print('ply is',ply)            data = [FenUtils.matrix2fen(BoardModel.get_instance().state) + ' w', ply]            self.client.send(data)            # receive move from engine            [fen, move] = self.client.receive()            self.logger.info("receive move from engine: " + str(move))            # draw tracking move            if move != 0:                BoardModel.get_instance().previousStep.empty()                [(src_x, src_y), (dst_x, dst_y)] = MoveUtils.move_in_state(move)                BoardView.get_instance().daw_previous_step(                    Point(src_x, src_y))                BoardView.get_instance().daw_previous_step(                    Point(dst_x, dst_y))            # draw piece            # if GameInfo.get_instance().LowerSideMoveFirst:            #     BoardModel.get_instance().state = FenUtils.fen2matrix(fen[::-1])            # else:            #     BoardModel.get_instance().state = FenUtils.fen2matrix(fen)            BoardModel.get_instance().state = FenUtils.fen2matrix(fen)            self.logger.info("communicate with server<--end")            print(GameInfo.get_instance().isUpperTurn)            GameInfo.get_instance().toggle_player()            BoardView.get_instance().draw_pieces()            BoardModel.get_instance().number_step_black += 1            # check images for AI            if BoardController.get_instance().isMate(BoardModel.get_instance().state, 1):                BoardView.get_instance().draw_is_mate()                # BoardModel.get_instance().black_king_sprite.image = KING_BLACK_DIED            elif BoardController.get_instance().isMate(BoardModel.get_instance().state, 0):                BoardView.get_instance().draw_is_mate()                # BoardModel.get_instance().red_king_sprite.image = KING_RED_DIED            # is Check            elif BoardController.get_instance().is_check(BoardModel.get_instance().state, 1):                BoardView.get_instance().draw_is_check()        # human mode or human turn        else:            for event in pygame.event.get():                if event.type == pygame.QUIT:                    pygame.quit()                    sys.exit()                elif event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:                    pygame.quit()                    sys.exit()                # event mouse click                elif event.type == pygame.MOUSEBUTTONUP:                    # get mouse position                    mouse_position = Point(pygame.mouse.get_pos()[0], pygame.mouse.get_pos()[1])                    # board handle event                    BoardController.get_instance().handle_mouse_click(mouse_position)                    # eboard handle event                    EBoardController.get_instance().handle_mouse_click(mouse_position)    """"update logic in each frame"""    def update(self):        BoardView.get_instance().update()        EBoardView.get_instance().update()    """"this method draw into computer graphic card"""    def draw(self, screen):        screen.blit(BoardView.get_instance(), (0, 0))        screen.blit(EBoardView.get_instance(), (BOARD_WIDTH, 0))        BoardView.get_instance().draw(screen)        EBoardView.get_instance().draw(screen)