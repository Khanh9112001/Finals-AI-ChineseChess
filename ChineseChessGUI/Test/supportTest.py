#this file to test FenUtils.py

import unittest
from Utils.FenUtils import*

class TestSupport(unittest.TestCase):

	# def test_generate_Pawn(self):
	# 	""""Test one Pawn GO straight"""
	# 	fen="9/9/9/4p4/9/9/9/9/9/9"
	# 	input=generatePly(fen)
	# 	expect=['9/9/9/9/4p4/9/9/9/9/9']
	# 	self.assertEqual(input,expect)
	
	def test_fen2matrix1(self):
		""""Test fen2matrix with no chess-man"""
		fen="9/9/9/9/9/9/9/9/9/9"
		input=fen2matrix(fen)
		
		expect= np.array([['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.']])
		self.assertTrue(np.array_equal(input, expect), '1')
		
	def test_fen2matrix2(self):
		""""Test fen2matrix with one pawn"""
		fen="9/9/9/p8/9/9/9/9/9/9"
		input=fen2matrix(fen)
		
		expect= np.array([['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['p','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.']])
		self.assertTrue(np.array_equal(input, expect), '2')
	def test_fen2matrix3(self):
		""""Test fen2matrix with 2 pawn"""
		fen="9/9/9/p1p6/9/9/9/9/9/9"
		input=fen2matrix(fen)
		
		expect= np.array([['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['p','.','p','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.']])
		self.assertTrue(np.array_equal(input, expect), '3')
	def test_fen2matrix4(self):
		""""Test fen2matrix with 3 pawn"""
		fen="9/9/9/p1p1p4/9/9/9/9/9/9"
		input=fen2matrix(fen)
		
		expect= np.array([['.','.','.','.','.','.','.','.','.'],
					 	 ['.','.','.','.','.','.','.','.','.'],
					 	 ['.','.','.','.','.','.','.','.','.'],
					 	 ['p','.','p','.','p','.','.','.','.'],
					 	 ['.','.','.','.','.','.','.','.','.'],
					 	 ['.','.','.','.','.','.','.','.','.'],
					 	 ['.','.','.','.','.','.','.','.','.'],
					 	 ['.','.','.','.','.','.','.','.','.'],
					 	 ['.','.','.','.','.','.','.','.','.'],
					 	 ['.','.','.','.','.','.','.','.','.']])
		self.assertTrue(np.array_equal(input, expect), '4')
	def test_fen2matrix4(self):
		""""Test fen2matrix with 4 pawn"""
		fen="9/9/9/p1p1p1p2/9/9/9/9/9/9"
		input=fen2matrix(fen)
		
		expect= np.array([['.','.','.','.','.','.','.','.','.'],
					 	 ['.','.','.','.','.','.','.','.','.'],
					 	 ['.','.','.','.','.','.','.','.','.'],
					 	 ['p','.','p','.','p','.','p','.','.'],
					 	 ['.','.','.','.','.','.','.','.','.'],
					 	 ['.','.','.','.','.','.','.','.','.'],
					 	 ['.','.','.','.','.','.','.','.','.'],
					 	 ['.','.','.','.','.','.','.','.','.'],
					 	 ['.','.','.','.','.','.','.','.','.'],
					 	 ['.','.','.','.','.','.','.','.','.']])
		self.assertTrue(np.array_equal(input, expect), '4')

	def test_fen2matrix5(self):
		""""Test fen2matrix with 5 pawn"""
		fen="9/9/9/p1p1p1p1p/9/9/9/9/9/9"
		input=fen2matrix(fen)
		expect= np.array([['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['p','.','p','.','p','.','p','.','p'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.']])
		self.assertTrue(np.array_equal(input, expect), '5')
	def test_fen2matrix6(self):
		""""Test fen2matrix with 2 rook"""
		fen="9/9/9/p1p1p1p1p/9/9/9/9/9/9"
		input=fen2matrix(fen)
		expect= np.array([['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['p','.','p','.','p','.','p','.','p'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.']])
		self.assertTrue(np.array_equal(input, expect), '6')
	def test_fen2matrix7(self):
		""""Test fen2matrix with 2 rook"""
		fen="r7r/9/9/p1p1p1p1p/9/9/9/9/9/9"
		input=fen2matrix(fen)
		expect= np.array([['r','.','.','.','.','.','.','.','r'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['p','.','p','.','p','.','p','.','p'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.']])
		self.assertTrue(np.array_equal(input, expect), '7')
	def test_fen2matrix8(self):
		""""Test fen2matrix with 2 rook"""
		fen="rh5hr/9/9/p1p1p1p1p/9/9/9/9/9/9"
		input=fen2matrix(fen)
		expect= np.array([['r','h','.','.','.','.','.','h','r'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['p','.','p','.','p','.','p','.','p'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.']])
		self.assertTrue(np.array_equal(input, expect), '8')
	def test_fen2matrix9(self):
		""""Test fen2matrix with 2 rook"""
		fen="rhe3ehr/9/9/p1p1p1p1p/9/9/9/9/9/9"
		input=fen2matrix(fen)
		expect= np.array([['r','h','e','.','.','.','e','h','r'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['p','.','p','.','p','.','p','.','p'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.']])
		self.assertTrue(np.array_equal(input, expect), '9')
	def test_fen2matrix9(self):
		""""Test fen2matrix add 2 elepent rook"""
		fen="rhe3ehr/9/9/p1p1p1p1p/9/9/9/9/9/9"
		input=fen2matrix(fen)
		expect= np.array([['r','h','e','.','.','.','e','h','r'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['p','.','p','.','p','.','p','.','p'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.']])
		self.assertTrue(np.array_equal(input, expect), '9')
	def test_fen2matrix10(self):
		""""Test fen2matrix with 2 rook"""
		fen="rhea1aehr/9/9/p1p1p1p1p/9/9/9/9/9/9"
		input=fen2matrix(fen)
		expect= np.array([['r','h','e','a','.','a','e','h','r'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['p','.','p','.','p','.','p','.','p'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.']])
		self.assertTrue(np.array_equal(input, expect), '10')
	def test_fen2matrix11(self):
		""""Test fen2matrix with 2 rook"""
		fen="rhea1aehr/9/9/p1p1p1p1p/9/9/9/9/9/9"
		input=fen2matrix(fen)
		expect= np.array([['r','h','e','a','.','a','e','h','r'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['p','.','p','.','p','.','p','.','p'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.']])
		self.assertTrue(np.array_equal(input, expect), '10')
	def test_fen2matrix11(self):
		""""Test fen2matrix add king"""
		fen="rheakaehr/9/9/p1p1p1p1p/9/9/9/9/9/9"
		input=fen2matrix(fen)
		expect= np.array([['r','h','e','a','k','a','e','h','r'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['p','.','p','.','p','.','p','.','p'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.']])
		self.assertTrue(np.array_equal(input, expect), '11')
	def test_fen2matrix12(self):
		""""Test fen2matrix add cannon"""
		fen="rheakaehr/9/1c5c1/p1p1p1p1p/9/9/9/9/9/9"
		input=fen2matrix(fen)
		expect= np.array([['r','h','e','a','k','a','e','h','r'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','c','.','.','.','.','.','c','.'],
						  ['p','.','p','.','p','.','p','.','p'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.']])
		self.assertTrue(np.array_equal(input, expect), '12')
	def test_fen2matrix13(self):
		""""Test fen2matrix add red rook"""
		fen="rheakaehr/9/1c5c1/p1p1p1p1p/9/9/9/9/9/R7R"
		input=fen2matrix(fen)
		expect= np.array([['r','h','e','a','k','a','e','h','r'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','c','.','.','.','.','.','c','.'],
						  ['p','.','p','.','p','.','p','.','p'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['.','.','.','.','.','.','.','.','.'],
						  ['R','.','.','.','.','.','.','.','R']])
		self.assertTrue(np.array_equal(input, expect), '13')
	def test_fen2matrix14(self):
		""""Test fen2matrix add red rook"""
		fen="rheakaehr/9/1c5c1/p1p1p1p1p/9/9/9/9/9/RHEAKAEHR"
		input=fen2matrix(fen)
		expect= np.array([['r','h','e','a','k','a','e','h','r'],
						['.','.','.','.','.','.','.','.','.'],
						['.','c','.','.','.','.','.','c','.'],
						['p','.','p','.','p','.','p','.','p'],
						['.','.','.','.','.','.','.','.','.'],
						['.','.','.','.','.','.','.','.','.'],
						['.','.','.','.','.','.','.','.','.'],
						['.','.','.','.','.','.','.','.','.'],
						['.','.','.','.','.','.','.','.','.'],
						['R','H','E','A','K','A','E','H','R']])
		self.assertTrue(np.array_equal(input, expect), '14')
	def test_fen2matrix15(self):
		""""Test fen2matrix add red rook"""
		fen="rheakaehr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/9/9/RHEAKAEHR"
		input=fen2matrix(fen)
		expect= np.array([['r','h','e','a','k','a','e','h','r'],
						['.','.','.','.','.','.','.','.','.'],
						['.','c','.','.','.','.','.','c','.'],
						['p','.','p','.','p','.','p','.','p'],
						['.','.','.','.','.','.','.','.','.'],
						['.','.','.','.','.','.','.','.','.'],
						['P','.','P','.','P','.','P','.','P'],
						['.','.','.','.','.','.','.','.','.'],
						['.','.','.','.','.','.','.','.','.'],
						['R','H','E','A','K','A','E','H','R']])
		self.assertTrue(np.array_equal(input, expect), '15')
	def test_fen2matrix16(self):
		""""Test fen2matrix add red cannon"""
		fen="rheakaehr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/1C5C1/9/RHEAKAEHR"
		input=fen2matrix(fen)
		expect= np.array([['r','h','e','a','k','a','e','h','r'],
						['.','.','.','.','.','.','.','.','.'],
						['.','c','.','.','.','.','.','c','.'],
						['p','.','p','.','p','.','p','.','p'],
						['.','.','.','.','.','.','.','.','.'],
						['.','.','.','.','.','.','.','.','.'],
						['P','.','P','.','P','.','P','.','P'],
						['.','C','.','.','.','.','.','C','.'],
						['.','.','.','.','.','.','.','.','.'],
						['R','H','E','A','K','A','E','H','R']])
		self.assertTrue(np.array_equal(input, expect), '16')
	def test_matrix2fen1(self):
		"""Test matrix2fen add """
		matrix=np.array([['.','.','.','.','.','.','.','.','.'],
						['.','.','.','.','.','.','.','.','.'],
						['.','.','.','.','.','.','.','.','.'],
						['.','.','.','.','.','.','.','.','.'],
						['.','.','.','.','.','.','.','.','.'],
						['.','.','.','.','.','.','.','.','.'],
						['.','.','.','.','.','.','.','.','.'],
						['.','.','.','.','.','.','.','.','.'],
						['.','.','.','.','.','.','.','.','.'],
						['.','.','.','.','.','.','.','.','.']])
		input=matrix2fen(matrix)
		expect="9/9/9/9/9/9/9/9/9/9"
		self.assertEqual(input,expect,"17")
	def test_matrix2fen2(self):
		"""Test matrix2fen add """
		
		matrix= np.array([['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['p','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.']])
		input=matrix2fen(matrix)
		expect="9/9/9/p8/9/9/9/9/9/9"
		self.assertEqual(input,expect,"18")

	def test_matrix2fen3(self):
		"""Test matrix2fen add """
		matrix= np.array([['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['p','.','p','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.']])
		input=matrix2fen(matrix)
		expect="9/9/9/p1p6/9/9/9/9/9/9"
		self.assertEqual(input,expect,"19")
	def test_matrix2fen4(self):
		"""Test matrix2fen add """
		matrix= np.array([['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['p','.','p','.','p','.','p','.','p'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.']])
		input=matrix2fen(matrix)
		expect="9/9/9/p1p1p1p1p/9/9/9/9/9/9"
		self.assertEqual(input,expect,"20")
	def test_matrix2fen5(self):
		"""Test matrix2fen add """
		matrix= np.array([['r','h','e','a','k','a','e','h','r'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['p','.','p','.','p','.','p','.','p'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.']])
		input=matrix2fen(matrix)
		expect="rheakaehr/9/9/p1p1p1p1p/9/9/9/9/9/9"
		self.assertEqual(input,expect,"21")
	def test_matrix2fen6(self):
		"""Test matrix2fen add """
		matrix= np.array([['r','h','e','a','k','a','e','h','r'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','c','.','.','.','.','.','c','.'],
					 	  ['p','.','p','.','p','.','p','.','p'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.']])
		input=matrix2fen(matrix)
		expect="rheakaehr/9/1c5c1/p1p1p1p1p/9/9/9/9/9/9"
		self.assertEqual(input,expect,"22")
	def test_matrix2fen7(self):
		"""Test matrix2fen add """
		matrix= np.array([['r','h','e','a','k','a','e','h','r'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','c','.','.','.','.','.','c','.'],
					 	  ['p','.','p','.','p','.','p','.','p'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['R','H','E','A','K','A','E','H','R']])
		input=matrix2fen(matrix)
		expect="rheakaehr/9/1c5c1/p1p1p1p1p/9/9/9/9/9/RHEAKAEHR"
		self.assertEqual(input,expect,"23")
	def test_matrix2fen7(self):
		"""Test matrix2fen add """
		matrix= np.array([['r','h','e','a','k','a','e','h','r'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','c','.','.','.','.','.','c','.'],
					 	  ['p','.','p','.','p','.','p','.','p'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['P','.','P','.','P','.','P','.','P'],
					 	  ['.','C','.','.','.','.','.','C','.'],
					 	  ['.','.','.','.','.','.','.','.','.'],
					 	  ['R','H','E','A','K','A','E','H','R']])
		input=matrix2fen(matrix)
		expect="rheakaehr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/1C5C1/9/RHEAKAEHR"
		self.assertEqual(input,expect,"24")
if __name__ == '__main__':
    unittest.main()
